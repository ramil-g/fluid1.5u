var fluid_1_5=fluid_1_5||{};(function($,fluid){fluid.visitComponentChildren=function(that,visitor,options,path,i){var instantiator=fluid.getInstantiator(that);for(var name in that){var newPath=instantiator.composePath(path,name);var component=that[name];if(!component||!component.typeName||(component.id&&options.visited&&options.visited[component.id])){continue}if(options.visited){options.visited[component.id]=true}if(visitor(component,name,newPath,path,i)){return true}if(!options.flat){fluid.visitComponentChildren(component,visitor,options,newPath)}}};fluid.getMemberNames=function(instantiator,thatStack){var path=instantiator.idToPath(thatStack[thatStack.length-1].id);var segs=fluid.model.parseEL(path);segs.unshift.apply(segs,fluid.generate(thatStack.length-segs.length,""));return segs};var visitComponents=function(instantiator,thatStack,visitor,options){options=options||{visited:{},flat:true,instantiator:instantiator};var memberNames=fluid.getMemberNames(instantiator,thatStack);for(var i=thatStack.length-1;i>=0;--i){var that=thatStack[i],path;if(that.typeName){options.visited[that.id]=true;path=instantiator.idToPath[that.id];if(visitor(that,memberNames[i],path,path,i)){return }}if(fluid.visitComponentChildren(that,visitor,options,path,i)){return }}};fluid.mountStrategy=function(prefix,root,toMount,targetPrefix){var offset=prefix.length;return function(target,name,i,segs){if(i<=prefix.length){return }for(var j=0;j<prefix.length;++j){if(segs[j]!==prefix[j]){return }}return toMount(target,name,i-prefix.length,segs.slice(offset))}};fluid.invokerFromRecord=function(invokerec,name,that){fluid.pushActivity("makeInvoker","beginning instantiation of invoker with name %name and record %record as child of %that",{name:name,record:invokerec,that:that});var invoker=fluid.makeInvoker(that,invokerec,name);fluid.popActivity();return invoker};fluid.memberFromRecord=function(memberrec,name,that){var value=fluid.expandOptions(memberrec,that);return value};fluid.recordStrategy=function(that,options,optionsStrategy,recordPath,recordMaker,prefix){prefix=prefix||[];return{strategy:function(target,name,i,segs){if(i!==1){return }var record=fluid.driveStrategy(options,[recordPath,name],optionsStrategy);if(record===undefined){return }fluid.set(target,[name],fluid.inEvaluationMarker);var member=recordMaker(record,name,that);fluid.set(target,[name],member);return member},initter:function(){var records=fluid.driveStrategy(options,recordPath,optionsStrategy)||{};for(var name in records){fluid.getForComponent(that,prefix.concat([name]))}}}};fluid.instantiateFirers=function(that,options){var shadow=fluid.shadowForComponent(that);var initter=fluid.get(shadow,["eventStrategyBlock","initter"])||fluid.identity;initter()};fluid.makeDistributionRecord=function(contextThat,sourceRecord,sourcePath,targetSegs,exclusions,offset,sourceType){offset=offset||0;sourceType=sourceType||"distribution";var source=fluid.copy(fluid.get(sourceRecord,sourcePath));fluid.each(exclusions,function(exclusion){fluid.model.applyChangeRequest(source,{path:exclusion,type:"DELETE"})});var record={options:{}};var primitiveSource=fluid.isPrimitive(source);fluid.model.applyChangeRequest(record,{path:targetSegs,type:primitiveSource?"ADD":"MERGE",value:source});return $.extend(record,{contextThat:contextThat,recordType:sourceType,priority:fluid.mergeRecordTypes.distribution+offset})};fluid.filterBlocks=function(contextThat,sourceBlocks,sourcePath,targetSegs,exclusions,removeSource){var togo=[],offset=0;fluid.each(sourceBlocks,function(block){var source=fluid.get(block.source,sourcePath);if(source){togo.push(fluid.makeDistributionRecord(contextThat,block.source,sourcePath,targetSegs,exclusions,offset++,block.recordType));var rescued=$.extend({},source);if(removeSource){fluid.model.applyChangeRequest(block.source,{path:sourcePath,type:"DELETE"})}fluid.each(exclusions,function(exclusion){var orig=fluid.get(rescued,exclusion);fluid.set(block.source,sourcePath.concat(exclusion),orig)})}});return togo};fluid.matchIoCSelector=function(selector,thatStack,contextHashes,memberNames,i){var thatpos=thatStack.length-1;var selpos=selector.length-1;while(true){var mustMatchHere=thatpos===thatStack.length-1||selector[selpos].child;var that=thatStack[thatpos];var selel=selector[selpos];var match=true;for(var j=0;j<selel.predList.length;++j){var pred=selel.predList[j];if(pred.context&&!(contextHashes[thatpos][pred.context]||memberNames[thatpos]===pred.context)){match=false;break}if(pred.id&&that.id!==pred.id){match=false;break}}if(selpos===0&&thatpos>i&&mustMatchHere){match=false}if(match){if(selpos===0){return true}--thatpos;--selpos}else{if(mustMatchHere){return false}else{--thatpos}}if(thatpos<i){return false}}};fluid.collectDistributions=function(distributedBlocks,distribution,thatStack,contextHashes,memberNames,i){if(fluid.matchIoCSelector(distribution.selector,thatStack,contextHashes,memberNames,i)){distributedBlocks.push.apply(distributedBlocks,distribution.blocks)}};fluid.getMembers=function(holder,name){return fluid.transform(holder,function(member){return fluid.get(member,name)})};fluid.receiveDistributions=function(parentThat,gradeNames,memberName){var instantiator=fluid.getInstantiator(parentThat);var thatStack=instantiator.getThatStack(parentThat);var memberNames=fluid.getMemberNames(instantiator,thatStack);memberNames.push(memberName);var distributedBlocks=[];var shadows=fluid.transform(thatStack,function(thisThat){return instantiator.idToShadow[thisThat.id]});var contextHashes=fluid.getMembers(shadows,"contextHash");contextHashes.push(fluid.gradeNamesToHash(gradeNames));thatStack.push({});for(var i=0;i<thatStack.length-1;++i){fluid.each(shadows[i].distributions,function(distribution){fluid.collectDistributions(distributedBlocks,distribution,thatStack,contextHashes,memberNames,i)})}return distributedBlocks};fluid.applyDistributions=function(that,preBlocks,targetShadow){var distributedBlocks=fluid.transform(preBlocks,function(preBlock){return fluid.generateExpandBlock(preBlock,that,targetShadow.mergePolicy)});var mergeOptions=targetShadow.mergeOptions;mergeOptions.mergeBlocks.push.apply(mergeOptions.mergeBlocks,distributedBlocks);mergeOptions.updateBlocks()};fluid.parseExpectedOptionsPath=function(path,role){var segs=fluid.model.parseEL(path);if(segs.length>1&&segs[0]!=="options"){fluid.fail("Error in options distribution record ",record," - only "+role+' paths beginning with "options" are supported')}return segs.slice(1)};fluid.isIoCSSSelector=function(context){return context.indexOf(" ")!==-1};fluid.pushDistributions=function(targetHead,selector,blocks){var targetShadow=fluid.shadowForComponent(targetHead);var id=fluid.allocateGuid();var distributions=(targetShadow.distributions=targetShadow.distributions||[]);distributions.push({id:id,selector:selector,blocks:blocks});return id};fluid.clearDistributions=function(targetHead,id){var targetShadow=fluid.shadowForComponent(targetHead);fluid.remove_if(targetShadow.distributions,function(distribution){return distribution.id===id})};fluid.extractSelectorHead=function(parsedSelector){var predList=parsedSelector[0].predList;var context=predList[0].context;predList.length=0;return context};fluid.undistributableOptions=["gradeNames","distributeOptions","returnedPath","argumentMap","initFunction","mergePolicy","progressiveCheckerOptions"];fluid.distributeOptions=function(that,optionsStrategy){var records=fluid.makeArray(fluid.driveStrategy(that.options,"distributeOptions",optionsStrategy));fluid.each(records,function(record){var targetRef=fluid.parseContextReference(record.target);var targetComp,selector;if(fluid.isIoCSSSelector(targetRef.context)){selector=fluid.parseSelector(targetRef.context,fluid.IoCSSMatcher);var headContext=fluid.extractSelectorHead(selector);if(headContext!=="that"){fluid.fail('Downwards options distribution not supported from component other than "that"')}targetComp=that}else{targetComp=fluid.resolveContext(targetRef.context,that);if(!targetComp){fluid.fail("Error in options distribution record ",record," - could not resolve context selector {"+targetRef.context+"} to a root component")}}var targetSegs=fluid.model.parseEL(targetRef.path);var preBlocks;if(record.record){preBlocks=[(fluid.makeDistributionRecord(that,record.record,[],targetSegs,[],0))]}else{var thatShadow=fluid.shadowForComponent(that);var source=fluid.parseContextReference(record.source||"{that}.options");if(source.context!=="that"){fluid.fail("Error in options distribution record ",record," only a context of {that} is supported")}var sourcePath=fluid.parseExpectedOptionsPath(source.path,"source");var fullExclusions=fluid.makeArray(record.exclusions).concat(sourcePath.length===0?fluid.undistributableOptions:[]);var exclusions=fluid.transform(fullExclusions,function(exclusion){return fluid.model.parseEL(exclusion)});preBlocks=fluid.filterBlocks(that,thatShadow.mergeOptions.mergeBlocks,sourcePath,targetSegs,exclusions,record.removeSource);thatShadow.mergeOptions.updateBlocks()}if(selector){fluid.pushDistributions(targetComp,selector,preBlocks)}else{var targetShadow=fluid.shadowForComponent(targetComp);fluid.applyDistributions(that,preBlocks,targetShadow)}})};fluid.gradeNamesToHash=function(gradeNames){var contextHash={};fluid.each(gradeNames,function(gradeName){contextHash[gradeName]=true;contextHash[fluid.computeNickName(gradeName)]=true});return contextHash};fluid.cacheShadowGrades=function(that,shadow){var contextHash=fluid.gradeNamesToHash(that.options.gradeNames);contextHash[that.nickName]=true;shadow.contextHash=contextHash};fluid.deliverOptionsStrategy=function(that,target,mergeOptions){var shadow=fluid.shadowForComponent(that,shadow);fluid.cacheShadowGrades(that,shadow);shadow.mergeOptions=mergeOptions};fluid.resolveReturnedPath=function(returnedPath,that){var shadow=fluid.shadowForComponent(that);return shadow&&shadow.path!==""?null:returnedPath};fluid.computeDynamicGrades=function(that,shadow,strategy){delete that.options.gradeNames;var gradeNames=fluid.driveStrategy(that.options,"gradeNames",strategy);var defaultsBlock=fluid.findMergeBlocks(shadow.mergeOptions.mergeBlocks,"defaults")[0];var dynamicGrades=fluid.remove_if(gradeNames,function(gradeName){return gradeName.charAt(0)==="{"||!fluid.hasGrade(defaultsBlock.target,gradeName)},[]);var resolved=[];fluid.each(dynamicGrades,function(dynamicGrade){var func=fluid.expandOptions(dynamicGrade,that);resolved=resolved.concat(typeof (func)==="function"?func():func)});if(resolved.length!==0){var newDefaults=fluid.copy(fluid.getGradedDefaults(that.typeName,resolved));gradeNames.length=0;gradeNames.push.apply(gradeNames,newDefaults.gradeNames);fluid.cacheShadowGrades(that,shadow);var defaultsBlock=fluid.findMergeBlocks(shadow.mergeOptions.mergeBlocks,"defaults")[0];defaultsBlock.source=newDefaults;shadow.mergeOptions.updateBlocks()}};fluid.computeDynamicComponentKey=function(recordKey,sourceKey){return recordKey+(sourceKey===0?"":"-"+sourceKey)};fluid.registerDynamicRecord=function(that,recordKey,sourceKey,record,toCensor){var key=fluid.computeDynamicComponentKey(recordKey,sourceKey);var cRecord=fluid.copy(record);delete cRecord[toCensor];fluid.set(that.options,["components",key],cRecord);return key};fluid.computeDynamicComponents=function(that,mergeOptions){var shadow=fluid.shadowForComponent(that);var localSub=shadow.subcomponentLocal={};var records=fluid.driveStrategy(that.options,"dynamicComponents",mergeOptions.strategy);fluid.each(records,function(record,recordKey){if(!record.sources&&!record.createOnEvent){fluid.fail("Cannot process dynamicComponents record ",record,' without a "sources" or "createOnEvent" entry')}if(record.sources){var sources=fluid.expandOptions(record.sources,that);fluid.each(sources,function(source,sourceKey){var key=fluid.registerDynamicRecord(that,recordKey,sourceKey,record,"sources");localSub[key]={source:source,sourcePath:sourceKey}})}else{if(record.createOnEvent){var event=fluid.event.expandOneEvent(that,record.createOnEvent);fluid.set(shadow,["dynamicComponentCount",recordKey],0);var listener=function(){var key=fluid.registerDynamicRecord(that,recordKey,shadow.dynamicComponentCount[recordKey]++,record,"createOnEvent");localSub[key]={arguments:fluid.makeArray(arguments)};fluid.initDependent(that,key)};event.addListener(listener);fluid.recordListener(event,listener,shadow)}}})};fluid.computeComponentAccessor=function(that){var shadow=fluid.shadowForComponent(that);var options=that.options;var strategy=shadow.mergeOptions.strategy;var optionsStrategy=fluid.mountStrategy(["options"],options,strategy);shadow.invokerStrategy=fluid.recordStrategy(that,options,strategy,"invokers",fluid.invokerFromRecord);shadow.eventStrategyBlock=fluid.recordStrategy(that,options,strategy,"events",fluid.eventFromRecord,["events"]);var eventStrategy=fluid.mountStrategy(["events"],that,shadow.eventStrategyBlock.strategy,["events"]);shadow.memberStrategy=fluid.recordStrategy(that,options,strategy,"members",fluid.memberFromRecord);shadow.getConfig={strategies:[fluid.model.funcResolverStrategy,fluid.makeGingerStrategy(that),optionsStrategy,shadow.invokerStrategy.strategy,shadow.memberStrategy.strategy,eventStrategy]};fluid.computeDynamicGrades(that,shadow,strategy,shadow.mergeOptions.mergeBlocks);fluid.distributeOptions(that,strategy);return shadow.getConfig};fluid.shadowForComponent=function(component){var instantiator=fluid.getInstantiator(component);return shadow=instantiator&&component?instantiator.idToShadow[component.id]:null};fluid.getForComponent=function(component,path){var shadow=fluid.shadowForComponent(component);var getConfig=shadow?shadow.getConfig:undefined;return fluid.get(component,path,getConfig)};fluid.makeGingerStrategy=function(that){var instantiator=fluid.getInstantiator(that);return function(component,thisSeg,index,segs){var atval=component[thisSeg];if(atval===fluid.inEvaluationMarker&&index===segs.length){fluid.fail('Error in component configuration - a circular reference was found during evaluation of path segment "'+thisSeg+'": for more details, see the activity records following this message in the console, or issue fluid.setLogging(fluid.logLevel.TRACE) when running your application')}if(index>1){return atval}if(atval===undefined){var parentPath=instantiator.idToShadow[component.id].path;var childPath=fluid.composePath(parentPath,thisSeg);atval=instantiator.pathToComponent[childPath]}if(atval===undefined){if(fluid.getForComponent(component,["options","components",thisSeg])){fluid.initDependent(component,thisSeg);atval=component[thisSeg]}}return atval}};fluid.filterBuiltinGrades=function(gradeNames){return fluid.remove_if(fluid.makeArray(gradeNames),function(gradeName){return/autoInit|fluid.littleComponent|fluid.modelComponent|fluid.eventedComponent|fluid.viewComponent|fluid.typeFount/.test(gradeName)})};fluid.dumpGradeNames=function(that){return that.options&&that.options.gradeNames?" gradeNames: "+JSON.stringify(fluid.filterBuiltinGrades(that.options.gradeNames)):""};fluid.dumpThat=function(that){return'{ typeName: "'+that.typeName+'"'+fluid.dumpGradeNames(that)+" id: "+that.id+"}"};fluid.dumpThatStack=function(thatStack,instantiator){var togo=fluid.transform(thatStack,function(that){var path=instantiator.idToPath(that.id);return fluid.dumpThat(that)+(path?(" - path: "+path):"")});return togo.join("\n")};var localRecordExpected=/arguments|options|container|source|sourcePath/;fluid.resolveContext=function(context,that){var instantiator=fluid.getInstantiator(that);if(context==="instantiator"){return instantiator}else{if(context==="that"){return that}}var foundComponent;var thatStack=instantiator.getFullStack(that);visitComponents(instantiator,thatStack,function(component,name){var shadow=fluid.shadowForComponent(component);if(context===name||shadow&&shadow.contextHash&&shadow.contextHash[context]||context===component.typeName||context===component.nickName){foundComponent=component;return true}if(fluid.getForComponent(component,["options","components",context,"type"])&&!component[context]){foundComponent=fluid.getForComponent(component,context);return true}});return foundComponent};fluid.makeStackFetcher=function(parentThat,localRecord){var fetcher=function(parsed){var context=parsed.context;if(localRecord&&localRecordExpected.test(context)){var fetched=fluid.get(localRecord[context],parsed.path);return context==="arguments"||context==="source"||context==="sourcePath"?fetched:{marker:context==="options"?fluid.EXPAND:fluid.EXPAND_NOW,value:fetched}}var foundComponent=fluid.resolveContext(context,parentThat);if(!foundComponent&&parsed.path!==""){var ref=fluid.renderContextReference(parsed);fluid.fail("Failed to resolve reference "+ref+" - could not match context with name "+context+" from component leaf ",parentThat)}return fluid.getForComponent(foundComponent,parsed.path)};return fetcher};fluid.makeStackResolverOptions=function(parentThat,localRecord){return $.extend(fluid.copy(fluid.rawDefaults("fluid.makeExpandOptions")),{fetcher:fluid.makeStackFetcher(parentThat,localRecord),contextThat:parentThat})};fluid.clearListeners=function(shadow){fluid.each(shadow.listeners,function(rec){rec.event.removeListener(rec.listener)});delete shadow.listeners};fluid.recordListener=function(event,listener,shadow){var listeners=shadow.listeners;if(!listeners){listeners=shadow.listeners=[]}listeners.push({event:event,listener:listener})};var idToInstantiator={};fluid.instantiator=function(freeInstantiator){var that={id:fluid.allocateGuid(),nickName:"instantiator",pathToComponent:{},idToShadow:{},composePath:fluid.composePath};that.idToPath=function(id){var shadow=that.idToShadow[id];return shadow?shadow.path:""};that.getThatStack=function(component){var shadow=that.idToShadow[component.id];if(shadow){var path=shadow.path;var parsed=fluid.model.parseEL(path);var togo=fluid.transform(parsed,function(value,i){var parentPath=fluid.model.composeSegments.apply(null,parsed.slice(0,i+1));return that.pathToComponent[parentPath]});var root=that.pathToComponent[""];if(root){togo.unshift(root)}return togo}else{return[component]}};that.getEnvironmentalStack=function(){var togo=[fluid.staticEnvironment];if(!freeInstantiator){togo.push(fluid.globalThreadLocal())}return togo};that.getFullStack=function(component){var thatStack=component?that.getThatStack(component):[];return that.getEnvironmentalStack().concat(thatStack)};function recordComponent(component,path,created){if(created){idToInstantiator[component.id]=that;var shadow=that.idToShadow[component.id]={};shadow.path=path}if(that.pathToComponent[path]){fluid.fail("Error during instantiation - path "+path+" which has just created component "+fluid.dumpThat(component)+" has already been used for component "+fluid.dumpThat(that.pathToComponent[path])+" - this is a circular instantiation or other oversight. Please clear the component using instantiator.clearComponent() before reusing the path.")}that.pathToComponent[path]=component}that.recordRoot=function(component){if(component&&component.id&&!that.pathToComponent[""]){recordComponent(component,"",true)}};that.recordKnownComponent=function(parent,component,name,created){var parentPath=that.idToShadow[parent.id].path;var path=that.composePath(parentPath,name);recordComponent(component,path,created)};that.clearComponent=function(component,name,child,options,noModTree,path){var record=that.idToShadow[component.id].path;options=options||{flat:true,instantiator:that};child=child||component[name];path=path||record;if(path===undefined){fluid.fail("Cannot clear component "+name+" from component ",component," which was not created by this instantiator")}fluid.fireEvent(child,"events.onClear",[child,name,component]);var childPath=that.composePath(path,name);var childRecord=that.idToShadow[child.id];if(childRecord&&childRecord.path===childPath){fluid.fireEvent(child,"events.onDestroy",[child,name,component]);fluid.clearListeners(childRecord);fluid.visitComponentChildren(child,function(gchild,gchildname,newPath,parentPath){that.clearComponent(child,gchildname,null,options,true,parentPath)},options,childPath);delete that.idToShadow[child.id];delete idToInstantiator[child.id]}delete that.pathToComponent[childPath];if(!noModTree){delete component[name]}};return that};fluid.freeInstantiator=fluid.instantiator(true);fluid.getInstantiator=function(component){return component&&idToInstantiator[component.id]||fluid.freeInstantiator};fluid.expandOptions=function(args,that,mergePolicy,localRecord,outerExpandOptions){if(!args){return args}fluid.pushActivity("expandOptions","expanding options %args for component %that ",{that:that,args:args});var expandOptions=fluid.makeStackResolverOptions(that,localRecord);expandOptions.mergePolicy=mergePolicy;var expanded=outerExpandOptions&&outerExpandOptions.defer?fluid.makeExpandOptions(args,expandOptions):fluid.expand(args,expandOptions);fluid.popActivity();return expanded};fluid.localRecordExpected=["type","options","args","mergeOptions","createOnEvent","priority","recordType"];fluid.checkComponentRecord=function(defaults,localRecord){var expected=fluid.arrayToHash(fluid.localRecordExpected);fluid.each(defaults&&defaults.argumentMap,function(value,key){expected[key]=true});fluid.each(localRecord,function(value,key){if(!expected[key]){fluid.fail('Probable error in subcomponent record - key "'+key+'" found, where the only legal options are '+fluid.keys(expected).join(", "))}})};fluid.pushDemands=function(list,demands){demands=fluid.makeArray(demands);var thisp=fluid.mergeRecordTypes.demands;function push(rec){rec.recordType="demands";rec.priority=thisp++;list.push(rec)}for(var i=0;i<demands.length;++i){var thisd=demands[i];if(thisd.options){push(thisd)}else{if(thisd.mergeOptions){var mergeOptions=fluid.makeArray(thisd.mergeOptions);fluid.each(mergeOptions,function(record){push({options:record})})}else{fluid.fail("Uninterpretable demands record without options or mergeOptions ",thisd)}}}};fluid.mergeRecordsToList=function(mergeRecords){var list=[];fluid.each(mergeRecords,function(value,key){value.recordType=key;if(key==="distributions"){list.push.apply(list,value)}else{if(key!=="demands"){if(!value.options){return }value.priority=fluid.mergeRecordTypes[key];if(value.priority===undefined){fluid.fail("Merge record with unrecognised type "+key+": ",value)}list.push(value)}else{fluid.pushDemands(list,value)}}});return list};var addPolicyBuiltins=function(policy){fluid.each(["gradeNames","mergePolicy","argumentMap","components","dynamicComponents","members","invokers","events","listeners","distributeOptions","transformOptions"],function(key){fluid.set(policy,[key,"*","noexpand"],true)});return policy};fluid.generateExpandBlock=function(record,that,mergePolicy,localRecord){var expanded=fluid.expandOptions(record.options,record.contextThat||that,mergePolicy,localRecord,{defer:true});expanded.priority=record.priority;expanded.recordType=record.recordType;return expanded};var expandComponentOptionsImpl=function(mergePolicy,defaults,userOptions,that){var defaultCopy=fluid.copy(defaults);addPolicyBuiltins(mergePolicy);var shadow=fluid.shadowForComponent(that);shadow.mergePolicy=mergePolicy;var mergeRecords={defaults:{options:defaultCopy}};if(userOptions){if(userOptions.marker===fluid.EXPAND){$.extend(mergeRecords,userOptions.mergeRecords);if(mergeRecords.subcomponentRecord){fluid.checkComponentRecord(defaults,mergeRecords.subcomponentRecord)}}else{mergeRecords.user={options:userOptions}}}var expandList=fluid.mergeRecordsToList(mergeRecords);var togo=fluid.transform(expandList,function(value){return fluid.generateExpandBlock(value,that,mergePolicy,userOptions&&userOptions.localRecord)});return togo};fluid.expandComponentOptions=function(mergePolicy,defaults,userOptions,that){var instantiator=userOptions&&userOptions.marker===fluid.EXPAND&&userOptions.memberName!==undefined?userOptions.instantiator:null;var fresh;if(!instantiator){instantiator=fluid.instantiator();fresh=true;fluid.log("Created new instantiator with id "+instantiator.id+" in order to operate on component "+(that?that.typeName:"[none]"))}fluid.pushActivity("expandComponentOptions","expanding component options %options with record %record for component %that",{options:userOptions&&userOptions.mergeRecords,record:userOptions,that:that});if(fresh){instantiator.recordRoot(that)}else{instantiator.recordKnownComponent(userOptions.parentThat,that,userOptions.memberName,true)}var togo=expandComponentOptionsImpl(mergePolicy,defaults,userOptions,that);fluid.popActivity();return togo};fluid.argMapToDemands=function(argMap){var togo=[];fluid.each(argMap,function(value,key){togo[value]="{"+key+"}"});return togo};fluid.makePassArgsSpec=function(initArgs){return fluid.transform(initArgs,function(arg,index){return"{arguments}."+index})};fluid.pushDemandSpec=function(record,options,mergeOptions){if(options&&options!=="{options}"){record.push({options:options})}if(mergeOptions){record.push({mergeOptions:mergeOptions})}};fluid.embodyDemands=function(parentThat,demandspec,initArgs,options){options=options||{};if(demandspec.mergeOptions&&demandspec.options){fluid.fail("demandspec ",demandspec," is invalid - cannot specify literal options together with mergeOptions")}if(demandspec.transformOptions){demandspec.options=$.extend(true,{},demandspec.options,{transformOptions:demandspec.transformOptions})}var demands=fluid.makeArray(demandspec.args);var upDefaults=fluid.defaults(demandspec.funcName);var distributions=upDefaults&&parentThat?fluid.receiveDistributions(parentThat,upDefaults.gradeNames,options.memberName):[];var argMap=upDefaults?upDefaults.argumentMap:null;var inferMap=false;if(!argMap&&(upDefaults||(options&&options.componentRecord))&&!options.passArgs){inferMap=true;if(demands.length<2){argMap=fluid.rawDefaults("fluid.littleComponent").argumentMap}else{var optionpos=$.inArray("{options}",demands);if(optionpos===-1){optionpos=demands.length-1}argMap={options:optionpos}}}options=options||{};if(demands.length===0){if(argMap){demands=fluid.argMapToDemands(argMap)}else{if(options.passArgs){demands=fluid.makePassArgsSpec(initArgs)}}}var localRecord=$.extend({arguments:initArgs},fluid.censorKeys(options.componentRecord,["type"]));var shadow=fluid.shadowForComponent(parentThat);var localDynamic=shadow&&options.memberName?shadow.subcomponentLocal[options.memberName]:null;fluid.each(argMap,function(index,name){if(initArgs.length>0){localRecord[name]=localRecord.arguments[index]}if(demandspec[name]!==undefined&&localRecord[name]===undefined){localRecord[name]=demandspec[name]}if(name!=="options"){for(var i=0;i<distributions.length;++i){if(distributions[i][name]!==undefined){localRecord[name]=distributions[i][name]}}}});for(var i=0;i<distributions.length;++i){if(distributions[i].type!==undefined){demandspec.funcName=distributions[i].type}}var mergeRecords={distributions:distributions};if(options.componentRecord!==undefined){mergeRecords.subcomponentRecord=$.extend({},options.componentRecord)}var expandOptions=fluid.makeStackResolverOptions(parentThat,localRecord);var args=[];if(demands){for(var i=0;i<demands.length;++i){var arg=demands[i];if(fluid.isMarker(arg)&&arg.value===fluid.COMPONENT_OPTIONS.value){arg="{options}";if(inferMap){argMap={options:i}}}if(typeof (arg)==="string"){if(arg.charAt(0)==="@"){var argpos=arg.substring(1);arg="{arguments}."+argpos}}if(!argMap||argMap.options!==i){args[i]=fluid.expand(arg,expandOptions)}else{if(typeof (arg)==="object"&&!arg.targetTypeName){arg.targetTypeName=demandspec.funcName}mergeRecords.demands=[];fluid.each(demandspec.backSpecs.reverse(),function(backSpec){fluid.pushDemandSpec(mergeRecords.demands,backSpec.options,backSpec.mergeOptions)});fluid.pushDemandSpec(mergeRecords.demands,demandspec.options||arg,demandspec.mergeOptions);if(initArgs.length>0){mergeRecords.user={options:localRecord.options}}args[i]={marker:fluid.EXPAND,localRecord:localDynamic,mergeRecords:mergeRecords,instantiator:fluid.getInstantiator(parentThat),parentThat:parentThat,memberName:options.memberName}}if(args[i]&&fluid.isMarker(args[i].marker,fluid.EXPAND_NOW)){args[i]=fluid.expand(args[i].value,expandOptions)}}}else{args=initArgs?initArgs:[]}var togo={args:args,funcName:demandspec.funcName};return togo};fluid.fabricateDestroyMethod=function(that,name,instantiator,child){return function(){instantiator.clearComponent(that,name,child)}};fluid.initDependent=function(that,name,directArgs){if(that[name]){return }directArgs=directArgs||[];var component=that.options.components[name];fluid.pushActivity("initDependent",'instantiating dependent component with name "%name" with record %record as child of %parent',{name:name,record:component,parent:that});var instance;var instantiator=idToInstantiator[that.id];if(typeof (component)==="string"){instance=fluid.expandOptions(component,that);instantiator.recordKnownComponent(that,instance,name,false)}else{if(component.type){var type=fluid.expandOptions(component.type,that);if(!type){fluid.fail("Error in subcomponent record: ",component.type," could not be resolved to a type for component ",name," of parent ",that)}var invokeSpec=fluid.resolveDemands(that,[type,name],directArgs,{componentRecord:component,memberName:name});instance=fluid.initSubcomponentImpl(that,{type:invokeSpec.funcName},invokeSpec.args);var path=instantiator.composePath(instantiator.idToPath(that.id),name);var existing=instantiator.pathToComponent[path];if(existing&&existing!==instance){instantiator.clearComponent(that,name,existing)}if(instance&&instance.typeName&&instance.id&&instance!==existing){instantiator.recordKnownComponent(that,instance,name,true)}instance.destroy=fluid.fabricateDestroyMethod(that,name,instantiator,instance)}else{fluid.fail("Unrecognised material in place of subcomponent "+name+' - no "type" field found')}}that[name]=instance;fluid.fireEvent(instance,"events.onAttach",[instance,name,that]);fluid.popActivity();return instance};fluid.bindDeferredComponent=function(that,componentName,component){var events=fluid.makeArray(component.createOnEvent);fluid.each(events,function(eventName){var event=eventName.charAt(0)==="{"?fluid.expandOptions(eventName,that):that.events[eventName];event.addListener(function(){fluid.pushActivity("initDeferred","instantiating deferred component %componentName of parent %that due to event %eventName",{componentName:componentName,that:that,eventName:eventName});if(that[componentName]){var instantiator=idToInstantiator[that.id];instantiator.clearComponent(that,componentName)}fluid.initDependent(that,componentName);fluid.popActivity()},null,null,component.priority)})};fluid.priorityForComponent=function(component){return component.priority?component.priority:(component.type==="fluid.typeFount"||fluid.hasGrade(fluid.defaults(component.type),"fluid.typeFount"))?"first":undefined};fluid.initDependents=function(that){fluid.pushActivity("initDependents","instantiating dependent components for component %that",{that:that});var shadow=fluid.shadowForComponent(that);shadow.memberStrategy.initter();var options=that.options;var components=options.components||{};var componentSort={};fluid.each(components,function(component,name){if(!component.createOnEvent){var priority=fluid.priorityForComponent(component);componentSort[name]={key:name,priority:fluid.event.mapPriority(priority,0)}}else{fluid.bindDeferredComponent(that,name,component)}});var componentList=fluid.event.sortListeners(componentSort);fluid.each(componentList,function(entry){fluid.initDependent(that,entry.key)});shadow.invokerStrategy.initter();fluid.popActivity()};var dependentStore={};function searchDemands(demandingName,contextNames){var exist=dependentStore[demandingName]||[];outer:for(var i=0;i<exist.length;++i){var rec=exist[i];for(var j=0;j<contextNames.length;++j){if(rec.contexts[j]!==contextNames[j]){continue outer}}return rec.spec}}var isDemandLogging=false;fluid.setDemandLogging=function(set){isDemandLogging=set};fluid.isDemandLogging=function(demandingNames){return isDemandLogging&&fluid.isLogging()};fluid.demands=function(demandingName,contextName,spec){var contextNames=fluid.makeArray(contextName).sort();if(!spec){return searchDemands(demandingName,contextNames)}else{if(spec.length){spec={args:spec}}}if(fluid.getCallerInfo&&fluid.isDemandLogging()){var callerInfo=fluid.getCallerInfo(5);if(callerInfo){spec.registeredFrom=callerInfo}}spec.demandId=fluid.allocateGuid();var exist=dependentStore[demandingName];if(!exist){exist=[];dependentStore[demandingName]=exist}exist.push({contexts:contextNames,spec:spec})};fluid.compareDemands=function(speca,specb){return specb.intersect-speca.intersect};fluid.locateAllDemands=function(parentThat,demandingNames){var demandLogging=fluid.isDemandLogging(demandingNames);if(demandLogging){fluid.log("Resolving demands for function names ",demandingNames," in context of "+(parentThat?"component "+parentThat.typeName:"no component"))}var contextNames={};var visited=[];var instantiator=fluid.getInstantiator(parentThat);var thatStack=instantiator.getFullStack(parentThat);visitComponents(instantiator,thatStack,function(component,xname,path,xpath,depth){contextNames[component.typeName]=depth;var gradeNames=fluid.makeArray(fluid.get(component,["options","gradeNames"]));fluid.each(gradeNames,function(gradeName){contextNames[gradeName]=depth});visited.push(component)});if(demandLogging){fluid.log("Components in scope for resolution:\n"+fluid.dumpThatStack(visited,instantiator))}var matches=[];for(var i=0;i<demandingNames.length;++i){var rec=dependentStore[demandingNames[i]]||[];for(var j=0;j<rec.length;++j){var spec=rec[j];var horizonLevel=spec.spec.horizon?contextNames[spec.spec.horizon]:-1;var record={spec:spec,intersect:0,uncess:0};for(var k=0;k<spec.contexts.length;++k){var depth=contextNames[spec.contexts[k]];record[depth!==undefined&&depth>=horizonLevel?"intersect":"uncess"]+=2}if(spec.contexts.length===0){record.intersect++}if(record.uncess===0){matches.push(record)}}}matches.sort(fluid.compareDemands);return matches};fluid.locateDemands=function(parentThat,demandingNames){var matches=fluid.locateAllDemands(parentThat,demandingNames);var demandspec=fluid.getMembers(matches,["spec","spec"]);if(fluid.isDemandLogging(demandingNames)){if(demandspec.length){fluid.log("Located "+matches.length+" potential match"+(matches.length===1?"":"es")+", selected best match with "+matches[0].intersect+" matched context names: ",demandspec)}else{fluid.log("No matches found for demands, using direct implementation")}}return demandspec};fluid.determineDemands=function(parentThat,funcNames){funcNames=fluid.makeArray(funcNames);var newFuncName=funcNames[0];var demandspec=fluid.locateDemands(parentThat,funcNames);if(demandspec.length&&demandspec[0].funcName){newFuncName=demandspec[0].funcName}return $.extend(true,{funcName:newFuncName,args:demandspec[0]?fluid.makeArray(demandspec[0].args):[],backSpecs:demandspec.slice(1)},fluid.censorKeys(demandspec[0],["funcName","args"]))};fluid.resolveDemands=function(parentThat,funcNames,initArgs,options){var demandspec=fluid.determineDemands(parentThat,funcNames);return fluid.embodyDemands(parentThat,demandspec,initArgs,options)};fluid.recordToApplicable=function(record,that){var recthis=record["this"];if(record.method^recthis){fluid.fail("Record ",that,' must contain both entries "method" and "this" if it contains either')}if(!record.method){return null}return{apply:function(noThis,args){var resolvedThis=fluid.expandOptions(recthis,that);if(typeof (resolvedThis)==="string"){resolvedThis=fluid.getGlobalValue(resolvedThis)}if(!resolvedThis){fluid.fail("Could not resolve reference "+recthis+" to a value")}var resolvedFunc=resolvedThis[record.method];if(typeof (resolvedFunc)!=="function"){fluid.fail("Object ",resolvedThis," at reference "+recthis+" has no member named "+record.method+" which is a function ")}fluid.log("Applying arguments ",args," to method "+record.method+" of instance ",resolvedThis);return resolvedFunc.apply(resolvedThis,args)}}};fluid.invoke=function(functionName,args,that,environment){fluid.pushActivity("invokeFunc",'invoking function with name "%functionName" from component %that',{functionName:functionName,that:that});var invokeSpec=fluid.resolveDemands(that,functionName,fluid.makeArray(args),{passArgs:true});var togo=fluid.invokeGlobalFunction(invokeSpec.funcName,invokeSpec.args,environment);fluid.popActivity();return togo};fluid.makeFreeInvoker=function(functionName,environment){var demandSpec=fluid.determineDemands(null,functionName);return function(){var invokeSpec=fluid.embodyDemands(null,demandSpec,fluid.makeArray(arguments),{passArgs:true});return fluid.invokeGlobalFunction(invokeSpec.funcName,invokeSpec.args,environment)}};fluid.makeInvoker=function(that,invokerec,name,environment){var functionName;if(typeof (invokerec)==="string"){if(invokerec.charAt(0)==="{"){invokerec={func:invokerec}}else{functionName=invokerec}}var demandspec=functionName?fluid.determineDemands(that,functionName):invokerec;return function(){fluid.pushActivity("invokeInvoker","invoking invoker with name %name and record %record from component %that",{name:name,record:invokerec,that:that});var func=fluid.recordToApplicable(invokerec,that);var args=fluid.makeArray(arguments);var invokeSpec=fluid.embodyDemands(that,demandspec,args,{passArgs:true});func=func||(invokeSpec.funcName?fluid.getGlobalValue(invokeSpec.funcName,environment):fluid.expandOptions(demandspec.func,that));if(!func){fluid.fail("Error in invoker record: could not resolve members func, funcName or method to a function implementation",demandspec)}var togo=func.apply(null,invokeSpec.args);fluid.popActivity();return togo}};fluid.event.makeTrackedListenerAdder=function(source){var shadow=fluid.shadowForComponent(source);return function(event){return{addListener:function(listener){fluid.recordListener(event,listener,shadow);event.addListener.apply(null,arguments)}}}};fluid.event.listenerEngine=function(eventSpec,callback,adder){var argstruc={};function checkFire(){var notall=fluid.find(eventSpec,function(value,key){if(argstruc[key]===undefined){return true}});if(!notall){callback(argstruc);fluid.clear(argstruc)}}fluid.each(eventSpec,function(event,eventName){adder(event).addListener(function(){argstruc[eventName]=fluid.makeArray(arguments);checkFire()})})};fluid.event.dispatchListener=function(that,listener,eventName,eventSpec,indirectArgs){return function(){fluid.pushActivity("dispatchListener","firing to listener to event named %eventName of component %that",{eventName:eventName,that:that});if(typeof (listener)==="string"){listener=fluid.event.resolveListener({globalName:listener})}var args=indirectArgs?arguments[0]:fluid.makeArray(arguments);var demandspec=fluid.determineDemands(that,eventName);if(demandspec.args.length===0&&eventSpec.args){demandspec.args=eventSpec.args}var resolved=fluid.embodyDemands(that,demandspec,args,{passArgs:true});var togo=listener.apply(null,resolved.args);fluid.popActivity();return togo}};fluid.event.resolveListenerRecord=function(lisrec,that,eventName){var badRec=function(record,extra){fluid.fail("Error in listener record - could not resolve reference ",record,' to a listener or firer. Did you miss out "events." when referring to an event firer?'+extra)};fluid.pushActivity("resolveListenerRecord","resolving listener record for event named %eventName for component %that",{eventName:eventName,that:that});var records=fluid.makeArray(lisrec);var transRecs=fluid.transform(records,function(record){var expanded=fluid.isPrimitive(record)||record.expander?{listener:record}:record;var methodist=fluid.recordToApplicable(record,that);if(methodist){expanded.listener=methodist}else{expanded.listener=expanded.listener||expanded.func||expanded.funcName}if(!expanded.listener){badRec(record,' Listener record must contain a member named "listener" or "method"')}var listener=expanded.listener=fluid.expandOptions(expanded.listener,that);if(!listener){badRec(record,"")}var firer;if(listener.typeName==="fluid.event.firer"){listener=listener.fire;firer=true}expanded.listener=expanded.args||firer?fluid.event.dispatchListener(that,listener,eventName,expanded):listener;return expanded});var togo={records:transRecs,adderWrapper:fluid.event.makeTrackedListenerAdder(that)};fluid.popActivity();return togo};fluid.event.expandOneEvent=function(that,event){var origin;if(typeof (event)==="string"&&event.charAt(0)!=="{"){origin=fluid.getForComponent(that,["events",event])}else{origin=fluid.expandOptions(event,that)}if(!origin||origin.typeName!=="fluid.event.firer"){fluid.fail("Error in event specification - could not resolve base event reference ",event," to an event firer: got ",origin)}return origin};fluid.event.expandEvents=function(that,event){return typeof (event)==="string"?fluid.event.expandOneEvent(that,event):fluid.transform(event,function(oneEvent){return fluid.event.expandOneEvent(that,oneEvent)})};fluid.event.resolveEvent=function(that,eventName,eventSpec){fluid.pushActivity("resolveEvent","resolving event with name %eventName attached to component %that",{eventName:eventName,that:that});var adder=fluid.event.makeTrackedListenerAdder(that);if(typeof (eventSpec)==="string"){eventSpec={event:eventSpec}}var event=eventSpec.event||eventSpec.events;if(!event){fluid.fail("Event specification for event with name "+eventName+" does not include a base event specification: ",eventSpec)}var origin=fluid.event.expandEvents(that,event);var isMultiple=origin.typeName!=="fluid.event.firer";var isComposite=eventSpec.args||isMultiple;var firer;if(isComposite){firer=fluid.event.getEventFirer(null,null," [composite] "+fluid.event.nameEvent(that,eventName));var dispatcher=fluid.event.dispatchListener(that,firer.fire,eventName,eventSpec,isMultiple);if(isMultiple){fluid.event.listenerEngine(origin,dispatcher,adder)}else{adder(origin).addListener(dispatcher)}}else{firer={typeName:"fluid.event.firer"};firer.fire=function(){var outerArgs=fluid.makeArray(arguments);fluid.pushActivity("fireSynthetic","firing synthetic event %eventName ",{eventName:eventName});var togo=origin.fire.apply(null,outerArgs);fluid.popActivity();return togo};firer.addListener=function(listener,namespace,predicate,priority){var dispatcher=fluid.event.dispatchListener(that,listener,eventName,eventSpec);adder(origin).addListener(dispatcher,namespace,predicate,priority)};firer.removeListener=function(listener){origin.removeListener(listener)}}fluid.popActivity();return firer};fluid.withEnvironment=function(envAdd,func,root){root=root||fluid.globalThreadLocal();return fluid.tryCatch(function(){for(var key in envAdd){root[key]=envAdd[key]}$.extend(root,envAdd);return func()},null,function(){for(var key in envAdd){delete root[key]}})};fluid.fetchContextReference=function(parsed,directModel,env,elResolver,externalFetcher){if(elResolver){parsed=elResolver(parsed,env)}var base=parsed.context?env[parsed.context]:directModel;if(!base){var resolveExternal=externalFetcher&&externalFetcher(parsed);return resolveExternal||base}return parsed.noDereference?parsed.path:fluid.get(base,parsed.path)};fluid.makeEnvironmentFetcher=function(directModel,elResolver,envGetter,externalFetcher){envGetter=envGetter||fluid.globalThreadLocal;return function(parsed){var env=envGetter();return fluid.fetchContextReference(parsed,directModel,env,elResolver,externalFetcher)}};fluid.extractEL=function(string,options){if(options.ELstyle==="ALL"){return string}else{if(options.ELstyle.length===1){if(string.charAt(0)===options.ELstyle){return string.substring(1)}}else{if(options.ELstyle==="${}"){var i1=string.indexOf("${");var i2=string.lastIndexOf("}");if(i1===0&&i2!==-1){return string.substring(2,i2)}}}}};fluid.extractELWithContext=function(string,options){var EL=fluid.extractEL(string,options);if(EL&&EL.charAt(0)==="{"){return fluid.parseContextReference(EL)}return EL?{path:EL}:EL};fluid.parseContextReference=function(reference,index,delimiter){index=index||0;var endcpos=reference.indexOf("}",index+1);if(endcpos===-1){fluid.fail('Cannot parse context reference "'+reference+'": Malformed context reference without }')}var context=reference.substring(index+1,endcpos);var endpos=delimiter?reference.indexOf(delimiter,endcpos+1):reference.length;var path=reference.substring(endcpos+1,endpos);if(path.charAt(0)==="."){path=path.substring(1)}return{context:context,path:path,endpos:endpos}};fluid.renderContextReference=function(parsed){return"{"+parsed.context+"}."+parsed.path};fluid.resolveContextValue=function(string,options){function fetch(parsed){fluid.pushActivity("resolveContextValue","resolving context value %string",{string:string});var togo=options.fetcher(parsed);fluid.pushActivity("resolvedContextValue","resolved value %string to value %value",{string:string,value:togo});fluid.popActivity(2);return togo}if(options.bareContextRefs&&string.charAt(0)==="{"){var parsed=fluid.parseContextReference(string);return fetch(parsed)}else{if(options.ELstyle&&options.ELstyle!=="${}"){var parsed=fluid.extractELWithContext(string,options);if(parsed){return fetch(parsed)}}}while(typeof (string)==="string"){var i1=string.indexOf("${");var i2=string.indexOf("}",i1+2);if(i1!==-1&&i2!==-1){var parsed;if(string.charAt(i1+2)==="{"){parsed=fluid.parseContextReference(string,i1+2,"}");i2=parsed.endpos}else{parsed={path:string.substring(i1+2,i2)}}var subs=fetch(parsed);var all=(i1===0&&i2===string.length-1);if(subs===undefined||subs===null){return subs}string=all?subs:string.substring(0,i1)+subs+string.substring(i2+1)}else{break}}return string};fluid.expandExpander=function(target,source,options){var expander=fluid.getGlobalValue(source.expander.type||"fluid.deferredInvokeCall");if(expander){return expander.call(null,target,source,options)}};fluid.fetchExpandChildren=function(target,source,mergePolicy,miniWorld,options){if(source.expander){var expanded=fluid.expandExpander(target,source,options);if(fluid.isPrimitive(expanded)||fluid.isDOMish(expanded)||(fluid.isArrayable(expanded)^fluid.isArrayable(target))){return expanded}else{$.extend(true,target,expanded)}}fluid.each(source,function(newSource,key){if(newSource===undefined){target[key]=undefined}else{options.strategy(target,key,null,null,source,mergePolicy,miniWorld)}});return target};function regenerateCursor(source,segs,limit,sourceStrategy){for(var i=0;i<limit;++i){source=sourceStrategy(source,segs[i],i,segs)}return source}fluid.isUnexpandable=function(source){return fluid.isPrimitive(source)||source.nodeType!==undefined||source.jquery};fluid.guardCircularity=function(seenIds,source,message1,message2){if(source&&source.id){if(!seenIds[source.id]){seenIds[source.id]=source}else{if(seenIds[source.id]===source){fluid.fail("Circularity in options "+message1+" - "+fluid.nameComponent(source)+" has already been seen"+message2)}}}};fluid.expandSource=function(options,target,deliverer,source,policy,miniWorld,recurse){var expanded,isTrunk,isLate;var thisPolicy=fluid.derefMergePolicy(policy);fluid.guardCircularity(options.seenIds,source,"expansion",' - please ensure options are not circularly connected, or protect from expansion using the "noexpand" policy or expander');if(typeof (source)==="string"&&!thisPolicy.noexpand){expanded=fluid.resolveContextValue(source,options)}else{if(thisPolicy.noexpand||fluid.isUnexpandable(source)){expanded=source}else{if(source.expander){expanded=fluid.expandExpander(deliverer,source,options)}else{if(thisPolicy.preserve){expanded=source;isLate=true}else{expanded=fluid.freshContainer(source)}isTrunk=true}}}if(!isLate&&expanded!==fluid.NO_VALUE){deliverer(expanded)}if(isTrunk){recurse(expanded,source,policy,miniWorld||isLate)}if(isLate&&expanded!==fluid.NO_VALUE){deliverer(expanded)}return expanded};fluid.makeExpandStrategy=function(options){var recurse=function(target,source,policy,miniWorld){return fluid.fetchExpandChildren(target,source,policy,miniWorld,options)};var strategy=function(target,name,i,segs,source,policy,miniWorld){if(!target){return }if(!miniWorld&&target.hasOwnProperty(name)){return target[name]}if(name==="expander"&&source&&source.expander.type){return }if(source===undefined){source=regenerateCursor(options.source,segs,i-1,options.sourceStrategy);policy=regenerateCursor(options.mergePolicy,segs,i-1,fluid.concreteTrundler)}var thisSource=options.sourceStrategy(source,name,i,segs);var thisPolicy=fluid.concreteTrundler(policy,name);function deliverer(value){target[name]=value}return fluid.expandSource(options,target,deliverer,thisSource,thisPolicy,miniWorld,recurse)};options.recurse=recurse;options.strategy=strategy;return strategy};fluid.defaults("fluid.makeExpandOptions",{ELstyle:"${}",bareContextRefs:true,target:fluid.inCreationMarker});fluid.makeExpandOptions=function(source,options){options=$.extend({},fluid.rawDefaults("fluid.makeExpandOptions"),options);options.expandSource=function(source){return fluid.expandSource(options,null,fluid.identity,source,options.mergePolicy,false)};if(!fluid.isUnexpandable(source)){options.source=source;options.seenIds={};options.target=fluid.freshContainer(source);options.sourceStrategy=options.sourceStrategy||fluid.concreteTrundler;fluid.makeExpandStrategy(options);options.initter=function(){options.target=fluid.fetchExpandChildren(options.target,options.source,options.mergePolicy,false,options)}}else{options.strategy=fluid.concreteTrundler;options.initter=fluid.identity;if(typeof (source)==="string"){options.target=options.expandSource(source)}else{options.target=source}}return options};fluid.expand=function(source,options){var expandOptions=fluid.makeExpandOptions(source,options);expandOptions.initter();return expandOptions.target};fluid.registerNamespace("fluid.expander");fluid.expander.deferredCall=function(deliverer,source,options){var expander=source.expander;var args=(!expander.args||fluid.isArrayable(expander.args))?expander.args:fluid.makeArray(expander.args);args=options.recurse([],args);return fluid.invokeGlobalFunction(expander.func,args)};fluid.deferredCall=fluid.expander.deferredCall;fluid.deferredInvokeCall=function(deliverer,source,options){var expander=source.expander;var args=fluid.makeArray(expander.args);args=options.recurse([],args);var funcEntry=expander.func||expander.funcName;var func=options.expandSource(funcEntry)||fluid.recordToApplicable(expander,options.contextThat);if(!func){fluid.fail("Error in expander record - "+funcEntry+" could not be resolved to a function for component ",options.contextThat)}return func.apply?func.apply(null,args):fluid.invoke(func,args,options.contextThat)};fluid.expander.noexpand=function(deliverer,source){return source.expander.value?source.expander.value:source.expander.tree};fluid.noexpand=fluid.expander.noexpand})(jQuery,fluid_1_5);